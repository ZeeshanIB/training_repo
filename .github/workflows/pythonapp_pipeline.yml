name: web-app pipeline
on:
  workflow_call:
    inputs:
      image_name:
        description: Name of the Docker image
        required: true
        type: string
        default: "webapp-docker"
      image_tag:
        description: Tag of the Docker image
        required: true
        type: string
        default: "v1" 
# setting woking directory in github repo
defaults:
  run:
    working-directory: ./web-app
jobs:
  version_check:
    runs-on: ubuntu-20.04
    outputs:
      output1: ${{ steps.step1.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Compare files
        run: |
          if cmp version.txt ../tracker/main/web-app ; then
            echo "Files are the same"
            exit 1
          else
            echo "Files are different"
          fi
      - name: creating version string
        id: step1
        run: |
          content=$(cat version.txt)
          # Extract the major, minor, and patch version numbers
          MAJOR=$(echo "$content" | grep "MAJOR" | cut -d'=' -f2 | tr -d ' ')
          MINOR=$(echo "$content" | grep "MINOR" | cut -d'=' -f2 | tr -d ' ')
          PATCH=$(echo "$content" | grep "PATCH" | cut -d'=' -f2 | tr -d ' ')
          # Create the version string in the format vMAJOR.MINOR.PATCH
          version="v$MAJOR.$MINOR.$PATCH"
          echo "version=$version" >> $GITHUB_OUTPUT
  build-webapp-image:
    runs-on: ubuntu-20.04
    needs: version_check
    steps:
    #retrieve the latest version of the code in a repository
    - uses: actions/checkout@v3
    # login to my docker hub account using repository secrets
    - name: docker login
      env:
        DOCKER_USER: ${{secrets.DOCKER_USER}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      run: |
        docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} 
    # build docker image with name your docker hub user name / image name specified in inputs : tag specified in inputs  
    - name: Build the Docker image
      run: |
        docker build --tag ${{secrets.DOCKER_USER}}/${{ inputs.image_name }}:${{needs.version_check.outputs.output1}} .
    # pushing the image to your docker hub repository
    - name: Docker Push to docker hub
      run: docker push ${{secrets.DOCKER_USER}}/${{ inputs.image_name }}:${{needs.version_check.outputs.output1}}
  webapp_deployment:
    runs-on: ubuntu-20.04
    # webapp_deployment job depends on or needs build-webapp-app job to be Successful
    needs: [version_check, build-webapp-image]
    services:  
      db:
        # Docker Hub image
        image: postgres:12
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      #retrieve the latest version of the code in a repository
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: create and connect to networks
        run: |
          docker network create mynetwork
          docker network connect mynetwork $(docker ps --format "{{.Names}}")
      - name: Connect to service container PostgreSQL
        run: docker run -d --name webapp --link $(docker ps --format "{{.Names}}"):postgres --network mynetwork -e DATABASE_URL=postgresql://postgres:postgres@postgres:5432/postgres -p 80:80 ${{secrets.DOCKER_USER}}/${{ inputs.image_name }}:${{needs.version_check.outputs.output1}}
      - name: check running container and webapp container logs
        run: |
          docker ps 
          docker logs webapp
      - name: sending post requst
        run: |
          sleep 10
          curl -X POST http://localhost:80/items -H "Content-Type: application/json" -d '{"title": "title3", "content": "content3"}'   
      - name: sending get request
        run: curl http://localhost:80/items/1  


